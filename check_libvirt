#!/bin/bash
#####################################################################################################
#
# checks KVM by using virsh
#
#####################################################################################################

VERSION=1.0

OK=0
WARN=0
CRIT=0

unset HOSTPORT

VM_NETSTATS(){
    # this just fetches the bytes
    # possible other options would be errs, drops and packets
    RXTX=$(virsh -c $TYPE://$UN@${HOST}${HOSTPORT}/system${KEYFILE} --readonly domifstat $VMHOST $VMIF | grep bytes | cut -d " " -f 2-3 | tr " " = ; return ${PIPESTATUS[0]})
    RETEX=$?

    PERFDATA=$(echo "$RXTX" | tr "\n" " " | sed -E 's/(=[0-9]+)/\1b;;/g')

    if [ "$RETEX" -eq 0 ];then
        echo "OK Traffic data received successfully | $PERFDATA"
    else
        echo "UNKNOWN: Problem with retrieving data from ${HOST}${HOSTPORT}"
        exit 3
    fi
}

function vm_status () {
	RUNNING=0
	NONRUNNING=0
	CRASHED=0
	for vmstatus in $( virsh -c $TYPE://$UN@${HOST}${HOSTPORT}/system${KEYFILE}--readonly list --all | sed '1,2d' | sed '/^$/d' | awk '{print $2":"$3}' )
	do
		NAME=$(echo $vmstatus | awk -F: '{print $1}')
		STATUS=$(echo $vmstatus | awk -F: '{print $2}')
		case "$STATUS" in
			running)
				RUNNING=$(expr $RUNNING + 1)
			;;
			paused|shutdown|shut*)
				NONRUNNING=$(expr $NONRUNNING + 1)
			;;
			crashed|dying)
				CRASHED=$(expr $CRASHED + 1)
			;;
		esac
	done

        PERFDATA=$(echo "running_VM=$RUNNING;;, non_running_VM=$NONRUNNING;;, crashed_VM=$CRASHED;;")

	if [ "$RUNNING" -gt 0 ]
	then
		OK=$(expr $OK + 1)
	fi

	if [ "$NONRUNNING" -gt 0 ]
	then
		WARN=$(expr $WARN + 1)
	fi

	if [ "$CRASHED" -gt 0 ]
	then
		CRIT=$(expr $CRIT + 1)
	fi

	if [ "$WARN" -eq 1 ]
	then
		echo "WARNING $NONRUNNING VM not running | $PERFDATA"
		exit 1
	elif	[ "$CRIT" -eq 1 ]
	then
		echo "CRITICAL $CRASHED VM | $PERFDATA"
		exit 2
	else
	  echo "OK $RUNNING VM running | $PERFDATA"
      exit 0
	fi
}

function pool_status () {
	ACTIVEPOOL=0
	INACTIVEPOOL=0
	for poolstatus in $( virsh -c $TYPE://$UN@${HOST}${HOSTPORT}/system${KEYFILE} --readonly pool-list --all | sed '1,2d' | sed '/^$/d' | awk '{print $1":"$2}')
	do
                POOLNAME=$(echo $poolstatus | awk -F: '{print $1}')
                POOLSTATUS=$(echo $poolstatus | awk -F: '{print $2}')
		case $POOLSTATUS in
			active)
				ACTIVEPOOL=$(expr $ACTIVEPOOL + 1)
			;;
			inactive)
				INACTIVEPOOL=$(expr $INACTIVEPOOL + 1)
			;;
		esac
	done
	PERFDATA=$(echo "active_pools=$ACTIVEPOOL;;, inactive_pools=$INACTIVEPOOL;;")
	if [ "$INACTIVEPOOL" -gt 0 ]
	then
		echo "WARNING there are $INACTIVEPOOL inactive pool | $PERFDATA"
		exit 1
	fi
	echo "OK there are $ACTIVEPOOL active pool | $PERFDATA"
	exit 0
}

function pool_usage () {
	POOLOK=0
	POOLWARN=0
	POOLCRIT=0
	declare -a PERFDATA=()
	for pool in $(virsh -c $TYPE://$UN@${HOST}${HOSTPORT}/system${KEYFILE} --readonly pool-list | grep active | awk '{print $1}')
	do
		POOLPARAMS=$(virsh -c $TYPE://$UN@${HOST}${HOSTPORT}/system${KEYFILE} --readonly pool-info --bytes $pool | grep -e "Name:" -e "Capacity:" -e "Allocation:" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g' | awk '{print $2":"$4":"$6}')
		POOLNAME=$(echo $POOLPARAMS | awk -F: '{print $1}')
		POOLCAPACITY=$(echo $POOLPARAMS | awk -F: '{print $2}')
		POOLALLOCATION=$(echo $POOLPARAMS | awk -F: '{print $3}')
 		POOLUSAGE100=$(( $POOLCAPACITY / 100 ))
 		POOLUSAGE=$(( $POOLALLOCATION / $POOLUSAGE100 ))
 		if [ "$POOLUSAGE" -gt "$CRITICAL" ]
 			then
 				POOLCRIT=$(expr "$POOLCRIT" + 1)
 		elif [ "$POOLUSAGE" -lt "$WARNING" ]
 			then
 				POOLOK=$(expr $POOLOK + 1)
 		else
 				POOLWARN=$(expr $POOLWARN + 1)
		fi
		PERFDATA+=$(echo -n "pool_$POOLNAME=$POOLUSAGE;$WARNING;$CRITICAL, ")
	done
	
	if [ "$POOLOK" -gt 0 ]
	then
		OK=$(expr $OK + 1)
	fi

	if [ "$POOLWARN" -gt 0 ]
	then
		WARN=$(expr $WARN + 1)
	fi

	if [ "$POOLCRIT" -gt 0 ]
	then
		CRIT=$(expr $CRIT + 1)
	fi

	if [ "$WARN" -eq 1 ]
	then
		echo "WARNING 1 or more active pool on warning threshold | ${PERFDATA[@]}"
		exit 1
	elif	[ "$CRIT" -eq 1 ]
	then
		echo "CRITICAL 1 or more active pool on critical threshold | ${PERFDATA[@]}"
		exit 2
	else
	  echo "OK all active pool below on warning threshold | ${PERFDATA[@]}"
      exit 0
	fi
}

function help {
cat <<_EOH
    $0

    Version: $VERSION

    Usage:

        install virsh on icinga/nagios host

	check the nagios user can connect to remote libvirt machine
	ex. sudo nagios virsh -c qemu+ssh://user@remote.libvirt.machine/system --readonly list

	If all looks good put the command into your icinga/nagios

	check_libvirt -H libvirt-uri -m mode <-w warning -c critical>

	-H (libvirt host)
	 The remote libvirt host
	 !!! mandatory argument !!!

	-n (VM name)
	 mandatory when -m net_stats
	 The VM name to be checked

	-u (username)
	 Username to connect to hypervisor
	 !!! mandatory argument !!!

	-t (connection type)
	 currently only qemu+ssh supported, this is default"     

        -p (ssh port)
          if not standard 22 you can define a different port here
        
	-k (ssh key)
	 the full path to a ssh key (optional)

	-i (interface name)
	 mandatory when -m net_stats
	 available interface names can be listed by e.g.:
	 sudo -u nagios virsh -c "qemu+ssh://user@host/system" --readonly domiflist <vm-name>

	-m (mode):
	 vm_status
	         check virtual machines status (running,paused etc...)
	         returns WARNING when one ore more VM powerwed off or paused
	         returns CRITICAL when one or more VM crashed

	 pool_status
	         check defined storage pools
	         returns warning when inactive pool founded

         pool_usage
	          check all active pool usage

	 net_stats
	         retrieve network statistics (requires -i & -n)

	-w (warning)
	 Warning threshonld in percentage
	 Default: 80%

	-c (critital)
	 Critical threshold in percentage
	 Default: 95%


_EOH
    exit 0
}

function check_wc () {
		if [ "$WARNING" -gt "$CRITICAL" ]
			then
				echo "WARNING is greater than critical!"
				exit 3
		fi
}

# catch help
case $1 in
    --help|help|-help|-h) help;;
esac
[ -z "$1" ] && help

# parsing arguments
while getopts ":H:w:c:m:u:t:i:n:k:p:" opts
do
	case ${opts} in
		H) HOST=${OPTARG} ;;
		w) WARNING=${OPTARG} ;;
		c) CRITICAL=${OPTARG} ;;
		m) MODE=${OPTARG} ;;
		u) UN=${OPTARG} ;;
		t) TYPE=${OPTARG} ;;
                k) KEYFILE="?keyfile=$OPTARG" ;;
                i) VMIF=$OPTARG ;;
                n) VMHOST=$OPTARG ;;
                p) HOSTPORT=":${OPTARG}" ;;
		*) help ;;
	esac
done

if [ -z "${HOST}" ]
	then
		help
fi
if [ -z "$UN" ]
	then
		help
fi
if [ -z "$WARNING" ]
	then
		WARNING=80
fi
if [ -z "$CRITICAL" ]
	then
		CRITICAL=95
fi
if [ -z "$TYPE" ]
	then
		TYPE="qemu+ssh"
fi
if [ -z "$MODE" ]
	then
		help
fi
case $MODE in
    vm_status) vm_status;;
    pool_status) pool_status;;
    pool_usage) 
        check_wc
        pool_usage
    ;;
    net_stats) VM_NETSTATS;;
esac
